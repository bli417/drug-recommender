{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-logger\";\nexport let RecommendService = /*#__PURE__*/(() => {\n  class RecommendService {\n    constructor(http, logger, apiUrl) {\n      this.http = http;\n      this.logger = logger;\n      this.apiUrl = apiUrl;\n    }\n    /**\r\n     * Get drug recommendation based on symptoms, daily medications, and allergies\r\n     * @param symptom - The symptom to get recommendations for\r\n     * @param daily - List of daily medications\r\n     * @param allergies - List of allergies\r\n     */\n    recommend(symptom, daily = [], allergies = []) {\n      this.logger.debug(`RecommendService.recommend: Getting recommendation for symptom ${symptom}`);\n      // Build query parameters\n      let params = new HttpParams().set('symptom', symptom);\n      if (daily && daily.length > 0) {\n        daily.forEach(med => {\n          params = params.append('daily', med);\n        });\n      }\n      if (allergies && allergies.length > 0) {\n        allergies.forEach(allergy => {\n          params = params.append('allergy', allergy);\n        });\n      }\n      // Make API request\n      return this.http.get(`${this.apiUrl}/recommend`, {\n        params\n      }).pipe(map(drug => {\n        // Add id and name properties if they don't exist\n        if (!drug.id) {\n          drug.id = drug.genericName.toLowerCase().replace(/\\s+/g, '-');\n        }\n        if (!drug.name) {\n          drug.name = drug.genericName || drug.brandName;\n        }\n        return drug;\n      }));\n    }\n  }\n  RecommendService.ɵfac = function RecommendService_Factory(t) {\n    return new (t || RecommendService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NGXLogger), i0.ɵɵinject('API'));\n  };\n  RecommendService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RecommendService,\n    factory: RecommendService.ɵfac,\n    providedIn: 'root'\n  });\n  return RecommendService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}