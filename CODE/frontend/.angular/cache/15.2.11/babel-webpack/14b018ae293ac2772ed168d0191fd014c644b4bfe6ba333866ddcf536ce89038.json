{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, Output, EventEmitter } from '@angular/core';\nimport { NGXLogger } from 'ngx-logger';\nimport { SymptomService } from '../../services/symptom/symptom.service';\nvar InputsComponent = /** @class */function () {\n  function InputsComponent(logger, symptomService) {\n    this.logger = logger;\n    this.symptomService = symptomService;\n    this.recommended = new EventEmitter();\n    this.symptoms = [];\n    this.dailyMedicines = [];\n    this.allergies = [];\n    this.selectedSymptom = null;\n  }\n  InputsComponent.prototype.ngOnInit = function () {\n    this.loadSymptoms();\n  };\n  InputsComponent.prototype.loadSymptoms = function () {\n    var _this = this;\n    this.symptomService.getSymptoms().subscribe(function (symptoms) {\n      _this.symptoms = symptoms;\n      _this.logger.debug('Loaded symptoms:', symptoms);\n    }, function (error) {\n      _this.logger.error('Error loading symptoms:', error);\n    });\n  };\n  InputsComponent.prototype.addDaily = function (event) {\n    var value = (event.value || '').trim();\n    if (value) {\n      this.dailyMedicines.push(value);\n      event.input.value = '';\n    }\n  };\n  InputsComponent.prototype.removeDaily = function (medicine) {\n    var index = this.dailyMedicines.indexOf(medicine);\n    if (index >= 0) {\n      this.dailyMedicines.splice(index, 1);\n    }\n  };\n  InputsComponent.prototype.addAllergy = function (event) {\n    var value = (event.value || '').trim();\n    if (value) {\n      this.allergies.push(value);\n      event.input.value = '';\n    }\n  };\n  InputsComponent.prototype.removeAllergy = function (allergy) {\n    var index = this.allergies.indexOf(allergy);\n    if (index >= 0) {\n      this.allergies.splice(index, 1);\n    }\n  };\n  InputsComponent.prototype.search = function (symptom) {\n    this.selectedSymptom = symptom;\n    this.logger.debug('Searching for symptom:', symptom);\n    this.logger.debug('Daily medicines:', this.dailyMedicines);\n    this.logger.debug('Allergies:', this.allergies);\n    // TODO: Implement search logic\n  };\n\n  var _a;\n  __decorate([Output(), __metadata(\"design:type\", Object)], InputsComponent.prototype, \"recommended\", void 0);\n  InputsComponent = __decorate([Component({\n    selector: 'app-inputs',\n    templateUrl: './inputs.component.html',\n    styleUrls: ['./inputs.component.scss']\n  }), __metadata(\"design:paramtypes\", [NGXLogger, typeof (_a = typeof SymptomService !== \"undefined\" && SymptomService) === \"function\" ? _a : Object])], InputsComponent);\n  return InputsComponent;\n}();\nexport { InputsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}