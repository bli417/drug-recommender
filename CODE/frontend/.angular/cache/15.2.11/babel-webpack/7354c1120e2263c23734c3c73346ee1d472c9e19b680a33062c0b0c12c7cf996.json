{"ast":null,"code":"import * as d3 from 'd3';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-logger\";\nimport * as i2 from \"../../services/mapper/mapper.service\";\nimport * as i3 from \"../../services/drug/drug.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/material/icon\";\nfunction DisplayComponent_mat_card_24_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"h4\")(2, \"mat-icon\");\n    i0.ɵɵtext(3, \"info\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \" Purpose \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r1._current.purpose);\n  }\n}\nfunction DisplayComponent_mat_card_24_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"h4\")(2, \"mat-icon\");\n    i0.ɵɵtext(3, \"warning\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \" Warnings \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"p\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r2._current.warnings);\n  }\n}\nfunction DisplayComponent_mat_card_24_div_9_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const drug_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(drug_r6);\n  }\n}\nfunction DisplayComponent_mat_card_24_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"h4\")(2, \"mat-icon\");\n    i0.ɵɵtext(3, \"compare_arrows\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \" Similar Drugs \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"ul\");\n    i0.ɵɵtemplate(6, DisplayComponent_mat_card_24_div_9_li_6_Template, 2, 1, \"li\", 14);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3._currentSimilar);\n  }\n}\nfunction DisplayComponent_mat_card_24_div_10_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const drug_r8 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(drug_r8);\n  }\n}\nfunction DisplayComponent_mat_card_24_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13)(1, \"h4\")(2, \"mat-icon\");\n    i0.ɵɵtext(3, \"dangerous\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4, \" Negative Drug Interactions \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"ul\");\n    i0.ɵɵtemplate(6, DisplayComponent_mat_card_24_div_10_li_6_Template, 2, 1, \"li\", 14);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4._currentInteractions);\n  }\n}\nfunction DisplayComponent_mat_card_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-card\", 11)(1, \"mat-card-header\")(2, \"mat-card-title\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-card-subtitle\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"mat-card-content\");\n    i0.ɵɵtemplate(7, DisplayComponent_mat_card_24_div_7_Template, 7, 1, \"div\", 12);\n    i0.ɵɵtemplate(8, DisplayComponent_mat_card_24_div_8_Template, 7, 1, \"div\", 12);\n    i0.ɵɵtemplate(9, DisplayComponent_mat_card_24_div_9_Template, 7, 1, \"div\", 12);\n    i0.ɵɵtemplate(10, DisplayComponent_mat_card_24_div_10_Template, 7, 1, \"div\", 12);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r0._currentName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0._current.brandName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0._current.purpose);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0._current.warnings);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0._currentSimilar && ctx_r0._currentSimilar.length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0._currentInteractions && ctx_r0._currentInteractions.length > 0);\n  }\n}\nexport let DisplayComponent = /*#__PURE__*/(() => {\n  class DisplayComponent {\n    constructor(logger, mapperService, drugService) {\n      this.logger = logger;\n      this.mapperService = mapperService;\n      this.drugService = drugService;\n      this._currentSimilar = [];\n      this._currentInteractions = [];\n      this._width = 600;\n      this._height = 600;\n    }\n    ngOnInit() {\n      this._width = 600;\n      this._height = 600;\n    }\n    ngOnChanges(changes) {\n      if (changes.recommended && changes.recommended.currentValue) {\n        this._current = changes.recommended.currentValue;\n        this._currentName = this._current.name || this._current.genericName;\n        // Extract similar drug names\n        this._currentSimilar = this._current.similar ? this._current.similar.map(drug => drug.genericName || drug.name || 'Unknown') : [];\n        // Extract interaction drug names\n        this._currentInteractions = this._current.interactions ? this._current.interactions.map(drug => drug.genericName || drug.name || 'Unknown') : [];\n        this.logger.debug('DisplayComponent: Receive new drug:', this._current);\n        if (this._width > 0 && this._height > 0) {\n          this.drawGraph();\n        }\n      }\n    }\n    set current(val) {\n      this._current = val;\n      this._currentName = val ? val.name : '';\n      this.logger.debug(`DisplayComponent.set.current: Set current drug to ${val ? val.genericName : 'null'}`);\n    }\n    get current() {\n      return this._current;\n    }\n    drawGraph() {\n      this.logger.debug('DisplayComponent.drawGraph: Draw a new graph.');\n      // set the dimensions and margins of the graph\n      const margin = {\n        top: 10,\n        right: 30,\n        bottom: 30,\n        left: 40\n      };\n      // Remove previous graph if exists\n      d3.select('.graph').select('svg').remove();\n      // append the svg object to the body of the page\n      this.svg = d3.select('.graph').append('svg').attr('width', this._width).attr('height', this._height).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n      // Create the data for the graph\n      const links = [];\n      const nodes = [];\n      if (this._current) {\n        this.createLinks(this._current, links);\n        this.createNodes(this._current, nodes, this.simulation);\n      }\n      // Initialize the links\n      const link = this.svg.selectAll('line').data(links).enter().append('line').style('stroke', '#aaa').style('stroke-width', 2);\n      // Initialize the nodes\n      const node = this.svg.selectAll('g').data(nodes).enter().append('g').on('click', d => this.handleNodeClick(d)).style('cursor', 'pointer');\n      // Simple method that works with most D3 versions\n      const drag = d3.drag().on('start', d => {\n        if (this.simulation) this.simulation.alphaTarget(0.3).restart();\n        d.fx = d.x;\n        d.fy = d.y;\n      }).on('drag', d => {\n        d.fx = d3.event.x;\n        d.fy = d3.event.y;\n      }).on('end', d => {\n        if (this.simulation) this.simulation.alphaTarget(0);\n        d.fx = null;\n        d.fy = null;\n      });\n      node.call(drag);\n      // Specify the size of the circle\n      node.append('circle').attr('r', d => {\n        const drugNode = d;\n        return drugNode.isSimilar ? 15 : 25; // Recommended drug is larger\n      }).style('fill', d => {\n        const drugNode = d;\n        return drugNode.isSimilar ? '#03a9f4' : '#8bc34a'; // Recommended=green, Similar=blue\n      }).style('stroke', 'white').style('stroke-width', 2);\n      // Add a label at each node\n      node.append('text').attr('dx', 0).attr('dy', d => {\n        const drugNode = d;\n        return drugNode.isSimilar ? 0 : 5; // Center text better\n      }).attr('text-anchor', 'middle').style('fill', 'white').style('font-weight', 'bold').style('font-size', d => {\n        const drugNode = d;\n        return drugNode.isSimilar ? '10pt' : '12pt';\n      }).text(d => {\n        const drugNode = d;\n        const name = this.getNodeName(drugNode);\n        const maxLength = drugNode.isSimilar ? 8 : 12;\n        return name.length > maxLength ? name.substring(0, maxLength) + '...' : name;\n      });\n      // Let's list the force we want to add to the simulation\n      this.simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(links).id(d => d.id)).force('charge', d3.forceManyBody().strength(-400)).force('center', d3.forceCenter(this._width / 2, this._height / 2)).force('collision', d3.forceCollide().radius(40)) // Prevent node overlap\n      .on('tick', () => this.ticked(link, node));\n    }\n    getNodeName(node) {\n      if (typeof node.name === 'string') {\n        return node.name;\n      } else if (node.name) {\n        return node.name.genericName || node.name.brandName || '';\n      }\n      return '';\n    }\n    createLinks(graph, links) {\n      if (!graph.similar) {\n        return;\n      }\n      for (const similar of graph.similar) {\n        links.push({\n          source: graph.id || graph.genericName,\n          target: similar.id || similar.genericName\n        });\n      }\n    }\n    createNodes(graph, nodes, simulation) {\n      if (!graph) return;\n      const nodeId = graph.id || graph.genericName;\n      if (nodes.findIndex(n => n.id === nodeId) >= 0) {\n        return;\n      }\n      // Add the main (recommended) drug node\n      nodes.push({\n        id: nodeId,\n        name: graph.name || graph.genericName,\n        degree: 0,\n        isSimilar: false // This is the recommended drug, not a similar one\n      });\n\n      if (!graph.similar) {\n        return;\n      }\n      // Add all similar drug nodes\n      for (const similar of graph.similar) {\n        // For similar drugs, we might not have the full Drug object yet\n        // So we add a basic node with the information we have\n        const similarId = similar.id || similar.genericName;\n        if (nodes.findIndex(n => n.id === similarId) < 0) {\n          nodes.push({\n            id: similarId,\n            name: similar,\n            degree: 1,\n            isSimilar: true // Mark as similar drug\n          });\n        }\n      }\n    }\n\n    ticked(link, node) {\n      link.attr('x1', d => d.source.x).attr('y1', d => d.source.y).attr('x2', d => d.target.x).attr('y2', d => d.target.y);\n      node.attr('transform', d => `translate(${d.x},${d.y})`);\n    }\n    // Change current drug to the selected one\n    changeCurrent(name) {\n      this.drugService.get(name.genericName).subscribe(d => {\n        this.currentDrug = d;\n        this.drawGraph();\n      });\n    }\n    // Get name as id for the current node\n    getId(data) {\n      return data.id;\n    }\n    handleNodeClick(node) {\n      const drugNode = node;\n      this.logger.debug('Node clicked:', drugNode);\n      // If this is the recommended drug, we already have the details\n      if (!drugNode.isSimilar) {\n        // Just reset to show the main recommended drug\n        this._current = this.recommended;\n        this._currentName = this._current.name || this._current.genericName;\n        this._currentSimilar = this._current.similar ? this._current.similar.map(drug => drug.genericName || drug.name || 'Unknown') : [];\n        this._currentInteractions = this._current.interactions ? this._current.interactions.map(drug => drug.genericName || drug.name || 'Unknown') : [];\n        return;\n      }\n      // For similar drugs, check if they have complete information in the recommended drug's similar array\n      if (this.recommended && this.recommended.similar) {\n        const similarDrug = this.recommended.similar.find(drug => drug.id && drug.id === drugNode.id || drug.genericName && drug.genericName === this.getNodeName(drugNode));\n        if (similarDrug) {\n          // Create a full Drug object from the DrugName object\n          this._current = {\n            id: similarDrug.id,\n            name: similarDrug.name,\n            genericName: similarDrug.genericName,\n            brandName: similarDrug.brandName,\n            purpose: 'Information not available',\n            warnings: 'No specific warnings available',\n            similar: [],\n            interactions: []\n          };\n          this._currentName = similarDrug.name || similarDrug.genericName;\n          this._currentSimilar = [];\n          this._currentInteractions = [];\n        } else {\n          // If we don't have complete information, show a minimal view\n          this._current = {\n            id: drugNode.id,\n            name: this.getNodeName(drugNode),\n            genericName: this.getNodeName(drugNode),\n            brandName: 'Unknown',\n            purpose: 'Detailed information not available for this similar drug.',\n            warnings: 'No specific warnings available.',\n            similar: [],\n            interactions: []\n          };\n          this._currentName = this.getNodeName(drugNode);\n          this._currentSimilar = [];\n          this._currentInteractions = [];\n        }\n      }\n    }\n  }\n  DisplayComponent.ɵfac = function DisplayComponent_Factory(t) {\n    return new (t || DisplayComponent)(i0.ɵɵdirectiveInject(i1.NGXLogger), i0.ɵɵdirectiveInject(i2.MapperService), i0.ɵɵdirectiveInject(i3.DrugService));\n  };\n  DisplayComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DisplayComponent,\n    selectors: [[\"app-display\"]],\n    inputs: {\n      recommended: \"recommended\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 25,\n    vars: 1,\n    consts: [[1, \"recommendation-result\"], [1, \"drug-recommendation-title\"], [1, \"results-layout\"], [1, \"graph-container\"], [\"width\", \"100%\", \"height\", \"500\", 1, \"graph\"], [1, \"legend\"], [1, \"key-dot\", \"recommended\"], [1, \"key-dot\", \"similar\"], [1, \"key-dot\", \"negative\"], [1, \"info-container\"], [\"tabindex\", \"-1\", 4, \"ngIf\"], [\"tabindex\", \"-1\"], [\"class\", \"drug-info-section\", 4, \"ngIf\"], [1, \"drug-info-section\"], [4, \"ngFor\", \"ngForOf\"]],\n    template: function DisplayComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\", 1);\n        i0.ɵɵtext(2, \"Drug Recommendation Results\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 2)(4, \"div\", 3)(5, \"mat-card\")(6, \"mat-card-header\")(7, \"mat-card-title\");\n        i0.ɵɵtext(8, \"Drug Interaction Network\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"mat-card-subtitle\");\n        i0.ɵɵtext(10, \"Visual representation of recommended and similar drugs\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"mat-card-content\");\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelement(12, \"svg\", 4);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵnamespaceHTML();\n        i0.ɵɵelementStart(13, \"div\", 5)(14, \"p\");\n        i0.ɵɵelement(15, \"span\", 6);\n        i0.ɵɵtext(16, \"Recommended Drug\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\");\n        i0.ɵɵelement(18, \"span\", 7);\n        i0.ɵɵtext(19, \"Similar Drugs\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"p\");\n        i0.ɵɵelement(21, \"span\", 8);\n        i0.ɵɵtext(22, \"Negative Interactions\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(23, \"div\", 9);\n        i0.ɵɵtemplate(24, DisplayComponent_mat_card_24_Template, 11, 6, \"mat-card\", 10);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(24);\n        i0.ɵɵproperty(\"ngIf\", ctx._current);\n      }\n    },\n    dependencies: [i4.NgForOf, i4.NgIf, i5.MatCard, i5.MatCardContent, i5.MatCardHeader, i5.MatCardSubtitle, i5.MatCardTitle, i6.MatIcon],\n    styles: [\".recommendation-result[_ngcontent-%COMP%]{margin-top:30px}.recommendation-result[_ngcontent-%COMP%]   .drug-recommendation-title[_ngcontent-%COMP%]{text-align:center;margin-bottom:25px;color:#3f51b5;font-size:24px;font-weight:500}.results-layout[_ngcontent-%COMP%]{display:flex;flex-direction:row;flex-wrap:wrap;gap:20px;max-width:1200px;margin:0 auto}@media (max-width: 920px){.results-layout[_ngcontent-%COMP%]{flex-direction:column}}.graph-container[_ngcontent-%COMP%]{flex:2;position:relative;min-width:300px}.graph-container[_ngcontent-%COMP%]   mat-card[_ngcontent-%COMP%]{margin-bottom:15px;box-shadow:0 4px 15px #00000014!important}.graph-container[_ngcontent-%COMP%]   mat-card[_ngcontent-%COMP%]   mat-card-header[_ngcontent-%COMP%]{background-color:#f5f5f5;padding:16px}.graph-container[_ngcontent-%COMP%]   mat-card[_ngcontent-%COMP%]   mat-card-header[_ngcontent-%COMP%]   mat-card-title[_ngcontent-%COMP%]{font-size:18px;margin-bottom:5px;color:#3f51b5}.graph-container[_ngcontent-%COMP%]   mat-card[_ngcontent-%COMP%]   mat-card-header[_ngcontent-%COMP%]   mat-card-subtitle[_ngcontent-%COMP%]{font-size:14px;color:#666}.info-container[_ngcontent-%COMP%]{flex:1;min-width:300px}.legend[_ngcontent-%COMP%]{position:absolute;right:20px;bottom:70px;font-size:12px;background-color:#ffffffe6;padding:10px 15px;border-radius:4px;box-shadow:0 2px 5px #0000001a;z-index:10}.legend[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:6px 0;display:flex;align-items:center}.legend[_ngcontent-%COMP%]   .key-dot[_ngcontent-%COMP%]{display:inline-block;height:12px;margin-right:8px;width:12px;border-radius:50%}.legend[_ngcontent-%COMP%]   .recommended[_ngcontent-%COMP%]{background:#8bc34a}.legend[_ngcontent-%COMP%]   .similar[_ngcontent-%COMP%]{background:#03a9f4}.legend[_ngcontent-%COMP%]   .negative[_ngcontent-%COMP%]{background:#ef5350}mat-card[_ngcontent-%COMP%]{width:100%;height:auto;overflow:hidden;box-shadow:0 4px 15px #00000014!important;border-radius:8px}mat-card[_ngcontent-%COMP%]   mat-card-header[_ngcontent-%COMP%]{background-color:#f5f5f5;padding:16px;margin-bottom:0}mat-card[_ngcontent-%COMP%]   mat-card-header[_ngcontent-%COMP%]   mat-card-title[_ngcontent-%COMP%]{font-size:20px;font-weight:500;margin-bottom:5px;color:#3f51b5}mat-card[_ngcontent-%COMP%]   mat-card-header[_ngcontent-%COMP%]   mat-card-subtitle[_ngcontent-%COMP%]{font-size:14px;color:#666}mat-card[_ngcontent-%COMP%]   mat-card-content[_ngcontent-%COMP%]{padding:20px;max-height:500px;overflow-y:auto}mat-card[_ngcontent-%COMP%]   mat-card-content[_ngcontent-%COMP%]   .drug-info-section[_ngcontent-%COMP%]{margin-bottom:24px}mat-card[_ngcontent-%COMP%]   mat-card-content[_ngcontent-%COMP%]   .drug-info-section[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%]{color:#3f51b5;font-size:16px;margin-bottom:12px;border-bottom:1px solid #eee;padding-bottom:8px;display:flex;align-items:center}mat-card[_ngcontent-%COMP%]   mat-card-content[_ngcontent-%COMP%]   .drug-info-section[_ngcontent-%COMP%]   h4[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{margin-right:8px;font-size:20px;height:20px;width:20px}mat-card[_ngcontent-%COMP%]   mat-card-content[_ngcontent-%COMP%]   .drug-info-section[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:14px;line-height:1.6;white-space:pre-line;color:#333;margin-left:5px}mat-card[_ngcontent-%COMP%]   mat-card-content[_ngcontent-%COMP%]   .drug-info-section[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]{list-style-type:disc;padding-left:30px;margin-top:5px}mat-card[_ngcontent-%COMP%]   mat-card-content[_ngcontent-%COMP%]   .drug-info-section[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{margin-bottom:8px;color:#333;font-size:14px}.graph[_ngcontent-%COMP%]{background-color:#fcfcfc;border:1px solid #eee;border-radius:4px;width:100%}\"]\n  });\n  return DisplayComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}