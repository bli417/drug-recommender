{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-logger\";\nexport let DrugService = /*#__PURE__*/(() => {\n  class DrugService {\n    constructor(http, logger, apiUrl) {\n      this.http = http;\n      this.logger = logger;\n      this.apiUrl = apiUrl;\n      this.cache = new Map();\n    }\n    /**\r\n     * Get drug by name\r\n     * @param name - Name of the drug\r\n     */\n    get(name) {\n      this.logger.debug(`DrugService.get: Getting drug by name ${name}`);\n      const key = this.normalize(name);\n      // Return from cache if available\n      const cachedResult = this.cache.get(key);\n      if (cachedResult) {\n        this.logger.debug(`DrugService.get: Found ${name} in cache.`);\n        return cachedResult;\n      }\n      // Otherwise, fetch from API and cache\n      const result = this.http.get(`${this.apiUrl}/drug/${key}`).pipe(map(drug => {\n        // Add id and name properties if they don't exist\n        if (!drug.id) {\n          drug.id = key;\n        }\n        if (!drug.name) {\n          drug.name = drug.genericName || drug.brandName;\n        }\n        return drug;\n      }));\n      this.cache.set(key, result);\n      return result;\n    }\n    /**\r\n     * Normalize drug name for API query\r\n     * @param name - Name to normalize\r\n     */\n    normalize(name) {\n      return name.toLowerCase().replace(/\\s+/g, '-');\n    }\n  }\n  DrugService.ɵfac = function DrugService_Factory(t) {\n    return new (t || DrugService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NGXLogger), i0.ɵɵinject('API'));\n  };\n  DrugService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DrugService,\n    factory: DrugService.ɵfac,\n    providedIn: 'root'\n  });\n  return DrugService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}