{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../drug/drug.service\";\nimport * as i2 from \"ngx-logger\";\nexport let MapperService = /*#__PURE__*/(() => {\n  class MapperService {\n    constructor(drugService, logger) {\n      this.drugService = drugService;\n      this.logger = logger;\n    }\n    /**\r\n     * Get mapping for the given drug\r\n     * @param drug - Drug to get mapping for\r\n     */\n    get(drug) {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.logger.debug(`MapperService.get: Getting mapping for drug ${drug.name || drug.genericName}`);\n        const nodes = new Array();\n        const links = new Array();\n        const mapping = {\n          nodes: nodes,\n          links: links\n        };\n        this.createMapping(drug, 1, mapping);\n        return mapping;\n      });\n    }\n    /**\r\n     * Create mapping for the given drug recursively\r\n     * @param drug - Drug to create mapping for\r\n     * @param depth - Current depth of recursion\r\n     * @param mapping - Current mapping object\r\n     */\n    createMapping(drug, depth, mapping) {\n      if (!drug || depth < 1) {\n        return mapping;\n      }\n      // Add nodes for similar drugs\n      if (drug.similar && drug.similar.length > 0) {\n        for (const similar of drug.similar) {\n          if (similar) {\n            const nodeId = similar.id || similar.genericName;\n            mapping.nodes.push({\n              name: {\n                genericName: similar.genericName,\n                brandName: similar.brandName\n              },\n              id: nodeId,\n              degree: depth,\n              isSimilar: true\n            });\n            // Add links between the current drug and similar drugs\n            mapping.links.push({\n              source: drug.id || drug.genericName,\n              target: nodeId\n            });\n          }\n        }\n      }\n      return mapping;\n    }\n    // Find more similar drugs and generate mappings\n    _explore(d0) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const rootMapping = {\n          nodes: [this.__generateNode(d0, 0)],\n          links: []\n        };\n        if (d0.similar && d0.similar.length > 1) {\n          const promises = d0.similar.map(s => this.drugService.get(s.genericName).toPromise()).map(d1Promise => __awaiter(this, void 0, void 0, function* () {\n            const drug1 = yield d1Promise;\n            if (drug1.similar && drug1.similar.length > 1) {\n              const m3 = yield Promise.all(drug1.similar.map(s => this.drugService.get(s.genericName).toPromise()).map(d2Promise => __awaiter(this, void 0, void 0, function* () {\n                const drug2 = yield d2Promise;\n                return this.__createMapping(drug2, 3);\n              })));\n              m3.push(this.__createMapping(drug1, 2));\n              return this.__reduce(m3);\n            } else {\n              return {\n                nodes: [],\n                links: []\n              };\n            }\n          }));\n          const m23 = yield Promise.all(promises);\n          m23.push(this.__createMapping(d0, 1));\n          m23.push(rootMapping);\n          return this.__reduce(m23);\n        } else {\n          return rootMapping;\n        }\n      });\n    }\n    // Create mappings for the given drug\n    __createMapping(drug, degree) {\n      if (!drug.similar) return {\n        nodes: [],\n        links: []\n      };\n      const mappings = drug.similar.map(s => {\n        return {\n          nodes: [this.__generateNode(s, degree)],\n          links: [this.__generateLink(drug, s)]\n        };\n      });\n      return this.__reduce(mappings);\n    }\n    // Merge the array of mappings into one\n    __reduce(mappings) {\n      const finalNodes = [];\n      // Combine and deduplicate nodes\n      const allNodes = mappings.flatMap(m => m.nodes);\n      for (const n of allNodes) {\n        const existingNode = finalNodes.find(f => f.id === n.id);\n        if (existingNode) {\n          if (n.degree > existingNode.degree) {\n            existingNode.degree = n.degree;\n          }\n        } else {\n          finalNodes.push(n);\n        }\n      }\n      // Combine links\n      const links = mappings.flatMap(m => m.links);\n      return {\n        nodes: finalNodes,\n        links\n      };\n    }\n    // Create node for the given drug name\n    __generateNode(drug, degree) {\n      const targetId = `${drug.genericName}:${drug.brandName}`;\n      return {\n        id: targetId,\n        name: drug,\n        degree: degree,\n        isSimilar: true\n      };\n    }\n    // Create link for the given drugs\n    __generateLink(root, drug) {\n      return {\n        source: `${root.genericName}:${root.brandName}`,\n        target: `${drug.genericName}:${drug.brandName}`\n      };\n    }\n  }\n  MapperService.ɵfac = function MapperService_Factory(t) {\n    return new (t || MapperService)(i0.ɵɵinject(i1.DrugService), i0.ɵɵinject(i2.NGXLogger));\n  };\n  MapperService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MapperService,\n    factory: MapperService.ɵfac,\n    providedIn: 'root'\n  });\n  return MapperService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}