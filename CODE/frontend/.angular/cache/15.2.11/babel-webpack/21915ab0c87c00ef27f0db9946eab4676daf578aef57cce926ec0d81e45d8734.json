{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as d3 from 'd3';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/mapper/mapper.service\";\nimport * as i2 from \"src/app/services/drug/drug.service\";\nimport * as i3 from \"ngx-logger\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/material/grid-list\";\nfunction DisplayComponent_mat_card_15_h4_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h4\");\n    i0.ɵɵtext(1, \"Purpose\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DisplayComponent_mat_card_15_p_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2._current.purpose);\n  }\n}\nfunction DisplayComponent_mat_card_15_h4_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h4\");\n    i0.ɵɵtext(1, \"Warnings\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DisplayComponent_mat_card_15_p_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r4._current.warnings);\n  }\n}\nfunction DisplayComponent_mat_card_15_h4_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h4\");\n    i0.ɵɵtext(1, \"Similar Drugs\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DisplayComponent_mat_card_15_p_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r6._currentSimilar.join(\"\\n\\n\"), \" \");\n  }\n}\nfunction DisplayComponent_mat_card_15_h4_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h4\");\n    i0.ɵɵtext(1, \" Negative Drug Interactions \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DisplayComponent_mat_card_15_p_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r8._currentInteractions.join(\"\\n\"), \" \");\n  }\n}\nfunction DisplayComponent_mat_card_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-card\", 9)(1, \"mat-card-header\")(2, \"mat-card-title\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"mat-card-subtitle\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"mat-card-content\");\n    i0.ɵɵtemplate(7, DisplayComponent_mat_card_15_h4_7_Template, 2, 0, \"h4\", 10);\n    i0.ɵɵtemplate(8, DisplayComponent_mat_card_15_p_8_Template, 2, 1, \"p\", 10);\n    i0.ɵɵtemplate(9, DisplayComponent_mat_card_15_h4_9_Template, 2, 0, \"h4\", 10);\n    i0.ɵɵtemplate(10, DisplayComponent_mat_card_15_p_10_Template, 2, 1, \"p\", 10);\n    i0.ɵɵtemplate(11, DisplayComponent_mat_card_15_h4_11_Template, 2, 0, \"h4\", 10);\n    i0.ɵɵtemplate(12, DisplayComponent_mat_card_15_p_12_Template, 2, 1, \"p\", 10);\n    i0.ɵɵtemplate(13, DisplayComponent_mat_card_15_h4_13_Template, 2, 0, \"h4\", 10);\n    i0.ɵɵtemplate(14, DisplayComponent_mat_card_15_p_14_Template, 2, 1, \"p\", 10);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r0._currentName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0._current.brandName);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"overflow\", \"auto\")(\"height\", \"600\", \"px\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0._current.purpose);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0._current.purpose);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0._current.warnings);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0._current.warnings);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0._currentSimilar.length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0._currentSimilar.length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0._currentInteractions.length > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0._currentInteractions.length > 0);\n  }\n}\nexport let DisplayComponent = /*#__PURE__*/(() => {\n  class DisplayComponent {\n    constructor(mapperService, drugService, logger) {\n      this.mapperService = mapperService;\n      this.drugService = drugService;\n      this.logger = logger;\n    }\n    ngOnInit() {}\n    ngOnChanges(changes) {\n      if (changes.recommended && changes.recommended.currentValue) {\n        this.logger.debug('DisplayComponent: Receive new drug:', this._current);\n        this.drawGraph();\n      }\n    }\n    /**\r\n     * Object representation of recommended drug\r\n     */\n    set currentDrug(input) {\n      this._current = input;\n      this._currentName = this._current.genericName.split(/(\\s-\\s)|,/)[0];\n      this._currentSimilar = this._current.similar ? this._current.similar.map(({\n        genericName\n      }) => genericName) : new Array();\n      this._currentInteractions = this._current.interactions ? this._current.interactions.map(({\n        genericName\n      }) => genericName) : new Array();\n      if (this._width > 0 && this._height > 0) {\n        this.drawGraph();\n      }\n    }\n    // Draw the d3 graph\n    drawGraph() {\n      this.logger.debug('DisplayComponent.drawGraph: Draw a new graph.');\n      // set the dimensions and margins of the graph\n      const margin = {\n        top: 10,\n        right: 30,\n        bottom: 30,\n        left: 40\n      };\n      // Remove previous graph if exists\n      d3.select('.graph').select('svg').remove();\n      // append the svg object to the body of the page\n      this.svg = d3.select('.graph').append('svg').attr('width', this._width).attr('height', this._height).append('g').attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n      // Create the data for the graph.\n      const links = [];\n      const nodes = [];\n      this.createLinks(this._current, links);\n      this.createNodes(this._current, nodes, this.simulation);\n      // Initialize the links\n      const link = this.svg.selectAll('line').data(links).enter().append('line').style('stroke', '#aaa');\n      // Initialize the nodes\n      const node = this.svg.selectAll('g').data(nodes).enter().append('g').call(d3.drag().on('start', (event, d) => this.onDragStart(d, this.simulation)).on('drag', (event, d) => this.onDragged(d)).on('end', (event, d) => this.onDragEnded(d, this.simulation)));\n      // Specify the size of the circle.\n      node.append('circle').attr('r', 15).style('fill', 'steelblue').style('stroke', 'none').on('click', (event, d) => {\n        this.logger.debug(`DisplayComponent.drawGraph.onClick: ${d.name}`);\n      });\n      // Add a label at each node.\n      node.append('text').attr('dx', 0).attr('dy', -2).attr('text-anchor', 'middle').style('fill', 'white').style('font-weight', 'bold').style('font-size', d => d.degree < 1 ? '12pt' : '8pt').text(d => d.name.length > 10 ? d.name.substring(0, 10) + '...' : d.name);\n      // Let's list the force we want to add to the simulation\n      this.simulation = d3.forceSimulation(nodes).force('link', d3.forceLink(links).id(d => d.id)).force('charge', d3.forceManyBody().strength(-400)).force('center', d3.forceCenter(this._width / 2, this._height / 2)).on('tick', () => this.ticked(link, node));\n    }\n    // Create mapping for currently recommended drug\n    CreateMapping() {\n      return __awaiter(this, void 0, void 0, function* () {\n        return yield this.mapperService.get(this._current);\n      });\n    }\n    // Create links\n    createLinks(graph, links) {\n      if (!graph.similar) {\n        return;\n      }\n      for (const similar of graph.similar) {\n        links.push({\n          source: graph.id,\n          target: similar.id\n        });\n      }\n    }\n    // Create nodes and labels\n    createNodes(graph, nodes, simulation) {\n      if (nodes.findIndex(n => n.id === graph.id) >= 0) {\n        return;\n      }\n      nodes.push({\n        id: graph.id,\n        name: graph.name,\n        degree: 0,\n        isSimilar: graph === this._current ? false : true\n      });\n      if (!graph.similar) {\n        return;\n      }\n      for (const similar of graph.similar) {\n        this.createNodes(similar, nodes, simulation);\n      }\n    }\n    // Update nodes and links to the correct location\n    ticked(link, node) {\n      link.attr('x1', d => d.source.x).attr('y1', d => d.source.y).attr('x2', d => d.target.x).attr('y2', d => d.target.y);\n      node.attr('transform', d => `translate(${d.x},${d.y})`);\n    }\n    // Change currently recommended drug to the one selected by user\n    changeCurrent(name) {\n      this.logger.debug(`DisplayComponent.changeCurrent: Change current recommended drug to generic name(${name.genericName}) and brand name (${name.brandName})`);\n      this.drugService.get(name).subscribe(d => this.currentDrug = d);\n    }\n    // Get name as id for the current node\n    getId(data) {\n      return data.id;\n    }\n    // Get node radius for the provided node\n    getSize(data) {\n      switch (data.degree) {\n        case 0:\n          return 50;\n        case 1:\n          return 20;\n        case 2:\n          return 10;\n        default:\n          return 5;\n      }\n    }\n    // Get color for the provided node\n    getColor(data) {\n      switch (data.degree) {\n        case 0:\n          return '#8bc34a';\n        case 1:\n          if (data.isSimilar) {\n            return '#03a9f4';\n          }\n          return '#ef5350';\n        default:\n          if (data.isSimilar) {\n            return '#77a1b4';\n          }\n          return '#b68887';\n      }\n    }\n    // Update node location on drag start\n    onDragStart(d, simulation) {\n      if (!d3.event.active) {\n        simulation.alphaTarget(0.3).restart();\n      }\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n    // Update node location on drag\n    onDragged(d) {\n      d.fx = d3.event.x;\n      d.fy = d3.event.y;\n    }\n    // Fix node location on drag ended\n    onDragEnded(d, simulation) {\n      if (!d3.event.active) {\n        simulation.alphaTarget(0);\n      }\n      d.fx = null;\n      d.fy = null;\n    }\n  }\n  DisplayComponent.ɵfac = function DisplayComponent_Factory(t) {\n    return new (t || DisplayComponent)(i0.ɵɵdirectiveInject(i1.MapperService), i0.ɵɵdirectiveInject(i2.DrugService), i0.ɵɵdirectiveInject(i3.NGXLogger));\n  };\n  DisplayComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DisplayComponent,\n    selectors: [[\"app-display\"]],\n    inputs: {\n      currentDrug: \"currentDrug\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 16,\n    vars: 1,\n    consts: [[1, \"recommendation-result\"], [\"cols\", \"4\", \"rowHeight\", \"700\"], [\"colspan\", \"3\"], [\"width\", \"100%\", \"height\", \"700\", 1, \"graph\"], [1, \"legend\"], [1, \"key-dot\", \"recommended\"], [1, \"key-dot\", \"similar\"], [1, \"key-dot\", \"negative\"], [\"tabindex\", \"-1\", 4, \"ngIf\"], [\"tabindex\", \"-1\"], [4, \"ngIf\"]],\n    template: function DisplayComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-grid-list\", 1)(2, \"mat-grid-tile\", 2);\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelement(3, \"svg\", 3);\n        i0.ɵɵnamespaceHTML();\n        i0.ɵɵelementStart(4, \"div\", 4)(5, \"p\");\n        i0.ɵɵelement(6, \"span\", 5);\n        i0.ɵɵtext(7, \"Recommended Drug\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"p\");\n        i0.ɵɵelement(9, \"span\", 6);\n        i0.ɵɵtext(10, \"Similar Drugs\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"p\");\n        i0.ɵɵelement(12, \"span\", 7);\n        i0.ɵɵtext(13, \"Negative Interactions\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(14, \"mat-grid-tile\");\n        i0.ɵɵtemplate(15, DisplayComponent_mat_card_15_Template, 15, 14, \"mat-card\", 8);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(15);\n        i0.ɵɵproperty(\"ngIf\", ctx._current);\n      }\n    },\n    dependencies: [i4.NgIf, i5.MatCard, i5.MatCardContent, i5.MatCardHeader, i5.MatCardSubtitle, i5.MatCardTitle, i6.MatGridList, i6.MatGridTile],\n    styles: [\".recommendation-result[_ngcontent-%COMP%]   mat-grid-list[_ngcontent-%COMP%]{width:80%;margin-left:10%}.legend[_ngcontent-%COMP%]{position:absolute;margin-left:80%;margin-top:640px;font-size:9pt}.legend[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:1px}.legend[_ngcontent-%COMP%]   .key-dot[_ngcontent-%COMP%]{display:inline-block;height:10px;margin-right:.5em;width:10px}.legend[_ngcontent-%COMP%]   .recommended[_ngcontent-%COMP%]{background:#8bc34a}.legend[_ngcontent-%COMP%]   .similar[_ngcontent-%COMP%]{background:#03a9f4}.legend[_ngcontent-%COMP%]   .negative[_ngcontent-%COMP%]{background:#ef5350}mat-card-content[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{white-space:pre-line}\"]\n  });\n  return DisplayComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}