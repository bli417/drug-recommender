{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { DrugService } from './../drug/drug.service';\nimport { NGXLogger } from 'ngx-logger';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./../drug/drug.service\";\nimport * as i2 from \"ngx-logger\";\nvar MapperService = /** @class */function () {\n  function MapperService(drugService, logger) {\n    this.drugService = drugService;\n    this.logger = logger;\n  }\n  /**\r\n   * Get mapping for the provided drug\r\n   * @param name String representation of drug name\r\n   */\n  MapperService.prototype.get = function (drug) {\n    this.logger.debug(\"MapperService.get: Start creating mapping for generic name(\".concat(drug.genericName, \") and brand name (\").concat(drug.brandName, \")\"));\n    return this._explore(drug);\n  };\n  // Find more similar drugs and generate mappings\n  MapperService.prototype._explore = function (d0) {\n    return __awaiter(this, void 0, void 0, function () {\n      var rootMapping, m23;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            rootMapping = {\n              nodes: [this.__generateNode(d0, 0)],\n              links: []\n            };\n            if (!(d0.similar && d0.similar.length > 1)) return [3 /*break*/, 2];\n            return [4 /*yield*/, Promise.all(d0.similar.map(function (s) {\n              return _this.drugService.get(s).toPromise();\n            }).map(function (d1) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var drug1, m3;\n                var _this = this;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4 /*yield*/, d1];\n                    case 1:\n                      drug1 = _a.sent();\n                      if (!(drug1.similar && drug1.similar.length > 1)) return [3 /*break*/, 3];\n                      return [4 /*yield*/, Promise.all(drug1.similar.map(function (s) {\n                        return _this.drugService.get(s).toPromise();\n                      }).map(function (d2) {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var drug2;\n                          return __generator(this, function (_a) {\n                            switch (_a.label) {\n                              case 0:\n                                return [4 /*yield*/, d2];\n                              case 1:\n                                drug2 = _a.sent();\n                                return [2 /*return*/, this.__createMapping(drug2, 3)];\n                            }\n                          });\n                        });\n                      }))];\n                    case 2:\n                      m3 = _a.sent();\n                      m3.push(this.__createMapping(drug1, 2));\n                      return [2 /*return*/, this.__reduce(m3)];\n                    case 3:\n                      return [2 /*return*/, {\n                        nodes: new Array(),\n                        links: new Array()\n                      }];\n                  }\n                });\n              });\n            }))];\n          case 1:\n            m23 = _a.sent();\n            m23.push(this.__createMapping(d0, 1));\n            m23.push(rootMapping);\n            return [2 /*return*/, this.__reduce(m23)];\n          case 2:\n            return [2 /*return*/, rootMapping];\n        }\n      });\n    });\n  };\n  // Create mappings for the given drug\n  MapperService.prototype.__createMapping = function (drug, degree) {\n    var _this = this;\n    var mappings = drug.similar.map(function (s) {\n      return {\n        nodes: [_this.__generateNode(s, degree)],\n        links: [_this.__generateLink(drug, s)]\n      };\n    });\n    return this.__reduce(mappings);\n  };\n  // Merge the array of mappings into one\n  MapperService.prototype.__reduce = function (mappings) {\n    var finalNodes = new Array();\n    mappings.map(function (m) {\n      return m.nodes;\n    }).reduce(function (n1, n2) {\n      return __spreadArray(__spreadArray([], n1, true), n2, true);\n    }, []).forEach(function (n) {\n      var result = finalNodes.filter(function (f) {\n        return f.id === n.id;\n      });\n      if (result.length > 0) {\n        var oldNode = result[0];\n        if (n.degree > oldNode.degree) {\n          oldNode.degree = n.degree;\n        }\n      } else {\n        finalNodes.push(n);\n      }\n    });\n    var links = mappings.map(function (m) {\n      return m.links;\n    }).reduce(function (l1, l2) {\n      return __spreadArray(__spreadArray([], l1, true), l2, true);\n    }, []);\n    return {\n      nodes: finalNodes,\n      links: links\n    };\n  };\n  // Create node for the given drug name\n  MapperService.prototype.__generateNode = function (drug, degree) {\n    var targetId = \"\".concat(drug.genericName, \":\").concat(drug.brandName);\n    return {\n      id: targetId,\n      name: drug,\n      degree: degree,\n      isSimilar: true\n    };\n  };\n  // Create link for the given drugs\n  MapperService.prototype.__generateLink = function (root, drug) {\n    return {\n      source: \"\".concat(root.genericName, \":\").concat(root.brandName),\n      target: \"\".concat(drug.genericName, \":\").concat(drug.brandName)\n    };\n  };\n  MapperService.ɵfac = function MapperService_Factory(t) {\n    return new (t || MapperService)(i0.ɵɵinject(i1.DrugService), i0.ɵɵinject(i2.NGXLogger));\n  };\n  MapperService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MapperService,\n    factory: MapperService.ɵfac,\n    providedIn: 'root'\n  });\n  return MapperService;\n}();\nexport { MapperService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}