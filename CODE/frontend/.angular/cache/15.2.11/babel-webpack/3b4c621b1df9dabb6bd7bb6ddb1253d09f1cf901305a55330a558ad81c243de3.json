{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-logger\";\nexport let SymptomService = /*#__PURE__*/(() => {\n  class SymptomService {\n    constructor(http, logger, baseUrl) {\n      this.http = http;\n      this.logger = logger;\n      this.baseUrl = baseUrl;\n      this.mockSymptoms = [{\n        id: 1,\n        name: 'Fever',\n        description: 'Elevated body temperature'\n      }, {\n        id: 2,\n        name: 'Headache',\n        description: 'Pain in the head or upper neck'\n      }, {\n        id: 3,\n        name: 'Cough',\n        description: 'Sudden expulsion of air from the lungs'\n      }, {\n        id: 4,\n        name: 'Sore Throat',\n        description: 'Pain or irritation in the throat'\n      }, {\n        id: 5,\n        name: 'Body Pain',\n        description: 'General pain throughout the body'\n      }, {\n        id: 6,\n        name: 'Fatigue',\n        description: 'Extreme tiredness resulting from physical or mental exertion'\n      }, {\n        id: 7,\n        name: 'Nausea',\n        description: 'Sensation of unease and discomfort in the stomach'\n      }, {\n        id: 8,\n        name: 'Vomiting',\n        description: 'Forceful expulsion of stomach contents through the mouth'\n      }, {\n        id: 9,\n        name: 'Diarrhea',\n        description: 'Loose, watery stools'\n      }, {\n        id: 10,\n        name: 'Rash',\n        description: 'Area of reddened, irritated, or swollen skin'\n      }];\n      this.apiUrl = `${this.baseUrl}/symptoms`;\n    }\n    getSymptoms() {\n      return this.http.get(this.apiUrl).pipe(catchError(error => {\n        this.logger.warn('Failed to load symptoms from API, using mock data', error);\n        return of(this.mockSymptoms);\n      }));\n    }\n    getSymptomById(id) {\n      return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(error => {\n        const symptom = this.mockSymptoms.find(s => s.id === id);\n        if (symptom) {\n          this.logger.warn(`Failed to load symptom ${id} from API, using mock data`, error);\n          return of(symptom);\n        }\n        throw error;\n      }));\n    }\n  }\n  SymptomService.ɵfac = function SymptomService_Factory(t) {\n    return new (t || SymptomService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NGXLogger), i0.ɵɵinject('API'));\n  };\n  SymptomService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SymptomService,\n    factory: SymptomService.ɵfac,\n    providedIn: 'root'\n  });\n  return SymptomService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}