{"ast":null,"code":"import { of } from 'rxjs';\nimport { HttpParams } from '@angular/common/http';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-logger\";\nexport let RecommendService = /*#__PURE__*/(() => {\n  class RecommendService {\n    constructor(http, logger, apiUrl) {\n      this.http = http;\n      this.logger = logger;\n      this.apiUrl = apiUrl;\n      // Mock data for testing when API is unavailable\n      this.mockDrugs = {\n        'fever': {\n          id: 'acetaminophen',\n          name: 'Acetaminophen',\n          genericName: 'Acetaminophen',\n          brandName: 'Tylenol',\n          purpose: 'Pain reliever and fever reducer',\n          warnings: 'Liver warning: This product contains acetaminophen. Severe liver damage may occur if you take more than the recommended dose.',\n          similar: [{\n            id: 'ibuprofen',\n            name: 'Ibuprofen',\n            genericName: 'Ibuprofen',\n            brandName: 'Advil'\n          }, {\n            id: 'aspirin',\n            name: 'Aspirin',\n            genericName: 'Aspirin',\n            brandName: 'Bayer'\n          }],\n          interactions: [{\n            id: 'warfarin',\n            name: 'Warfarin',\n            genericName: 'Warfarin',\n            brandName: 'Coumadin'\n          }]\n        },\n        'headache': {\n          id: 'ibuprofen',\n          name: 'Ibuprofen',\n          genericName: 'Ibuprofen',\n          brandName: 'Advil',\n          purpose: 'Pain reliever, fever reducer, and anti-inflammatory',\n          warnings: 'Stomach bleeding warning: This product contains an NSAID, which may cause severe stomach bleeding.',\n          similar: [{\n            id: 'acetaminophen',\n            name: 'Acetaminophen',\n            genericName: 'Acetaminophen',\n            brandName: 'Tylenol'\n          }, {\n            id: 'naproxen',\n            name: 'Naproxen',\n            genericName: 'Naproxen',\n            brandName: 'Aleve'\n          }],\n          interactions: [{\n            id: 'aspirin',\n            name: 'Aspirin',\n            genericName: 'Aspirin',\n            brandName: 'Bayer'\n          }, {\n            id: 'warfarin',\n            name: 'Warfarin',\n            genericName: 'Warfarin',\n            brandName: 'Coumadin'\n          }]\n        },\n        'cough': {\n          id: 'dextromethorphan',\n          name: 'Dextromethorphan',\n          genericName: 'Dextromethorphan',\n          brandName: 'Robitussin',\n          purpose: 'Cough suppressant',\n          warnings: 'Do not use if you are taking MAOIs or have taken MAOIs in the past 14 days.',\n          similar: [{\n            id: 'guaifenesin',\n            name: 'Guaifenesin',\n            genericName: 'Guaifenesin',\n            brandName: 'Mucinex'\n          }, {\n            id: 'benzonatate',\n            name: 'Benzonatate',\n            genericName: 'Benzonatate',\n            brandName: 'Tessalon'\n          }],\n          interactions: [{\n            id: 'ssri',\n            name: 'SSRIs',\n            genericName: 'Selective serotonin reuptake inhibitors',\n            brandName: 'Various'\n          }]\n        },\n        'allergies': {\n          id: 'loratadine',\n          name: 'Loratadine',\n          genericName: 'Loratadine',\n          brandName: 'Claritin',\n          purpose: 'Antihistamine for allergy relief',\n          warnings: 'Do not use if you have narrow-angle glaucoma or urinary retention.',\n          similar: [{\n            id: 'cetirizine',\n            name: 'Cetirizine',\n            genericName: 'Cetirizine',\n            brandName: 'Zyrtec'\n          }, {\n            id: 'fexofenadine',\n            name: 'Fexofenadine',\n            genericName: 'Fexofenadine',\n            brandName: 'Allegra'\n          }],\n          interactions: []\n        },\n        'sore throat': {\n          id: 'benzocaine',\n          name: 'Benzocaine',\n          genericName: 'Benzocaine',\n          brandName: 'Cepacol',\n          purpose: 'Local anesthetic for pain relief',\n          warnings: 'Rare but serious side effects can occur. Stop use if rash or irritation develops.',\n          similar: [{\n            id: 'phenol',\n            name: 'Phenol',\n            genericName: 'Phenol',\n            brandName: 'Chloraseptic'\n          }, {\n            id: 'menthol',\n            name: 'Menthol',\n            genericName: 'Menthol',\n            brandName: 'Halls'\n          }],\n          interactions: []\n        },\n        'default': {\n          id: 'default-drug',\n          name: 'Acetaminophen',\n          genericName: 'Acetaminophen',\n          brandName: 'Tylenol',\n          purpose: 'Pain reliever and fever reducer',\n          warnings: 'Liver warning: This product contains acetaminophen. Severe liver damage may occur if you take more than the recommended dose.',\n          similar: [{\n            id: 'ibuprofen',\n            name: 'Ibuprofen',\n            genericName: 'Ibuprofen',\n            brandName: 'Advil'\n          }, {\n            id: 'naproxen',\n            name: 'Naproxen',\n            genericName: 'Naproxen',\n            brandName: 'Aleve'\n          }],\n          interactions: []\n        }\n      };\n    }\n    /**\r\n     * Get drug recommendation based on symptoms, daily medications, and allergies\r\n     * @param symptom - The symptom to get recommendations for\r\n     * @param daily - List of daily medications\r\n     * @param allergies - List of allergies\r\n     */\n    recommend(symptom, daily = [], allergies = []) {\n      this.logger.debug(`RecommendService.recommend: Getting recommendation for symptom ${symptom}`);\n      // Build query parameters\n      let params = new HttpParams().set('symptom', symptom);\n      if (daily && daily.length > 0) {\n        daily.forEach(med => {\n          params = params.append('daily', med);\n        });\n      }\n      if (allergies && allergies.length > 0) {\n        allergies.forEach(allergy => {\n          params = params.append('allergy', allergy);\n        });\n      }\n      // Make API request\n      return this.http.get(`${this.apiUrl}/recommend`, {\n        params\n      }).pipe(map(drug => {\n        // Add id and name properties if they don't exist\n        if (!drug.id) {\n          drug.id = drug.genericName.toLowerCase().replace(/\\s+/g, '-');\n        }\n        if (!drug.name) {\n          drug.name = drug.genericName || drug.brandName;\n        }\n        return drug;\n      }), catchError(error => {\n        this.logger.warn('Failed to get recommendation from API, using mock data', error);\n        // Normalize symptom text (lowercase, remove extra spaces)\n        const normalizedSymptom = symptom.toLowerCase().trim();\n        // Try to match with our mock data keys\n        let mockDrug;\n        // Find the best matching symptom\n        const matchingSymptoms = Object.keys(this.mockDrugs).filter(key => key !== 'default' && normalizedSymptom.includes(key));\n        if (matchingSymptoms.length > 0) {\n          // Pick the first matching symptom\n          mockDrug = Object.assign({}, this.mockDrugs[matchingSymptoms[0]]);\n        } else {\n          // If no match, use default\n          mockDrug = Object.assign({}, this.mockDrugs['default']);\n        }\n        // Filter out any drugs that are in the allergies list\n        if (allergies.length > 0) {\n          mockDrug.similar = mockDrug.similar.filter(drug => !allergies.some(allergy => drug.genericName.toLowerCase().includes(allergy.toLowerCase()) || drug.brandName.toLowerCase().includes(allergy.toLowerCase())));\n        }\n        return of(mockDrug);\n      }));\n    }\n  }\n  RecommendService.ɵfac = function RecommendService_Factory(t) {\n    return new (t || RecommendService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NGXLogger), i0.ɵɵinject('API'));\n  };\n  RecommendService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RecommendService,\n    factory: RecommendService.ɵfac,\n    providedIn: 'root'\n  });\n  return RecommendService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}