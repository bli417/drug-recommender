{"ast":null,"code":"import { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { NGXLogger } from 'ngx-logger';\nimport { shareReplay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-logger\";\nvar DrugService = /** @class */function () {\n  function DrugService(http, api, logger) {\n    this.http = http;\n    this.api = api;\n    this.logger = logger;\n    this.CACHE_SIZE = 2;\n    this.cache$ = new Map();\n  }\n  /**\r\n   * Get drug detail from cache; If not find in cache, get it from backend\r\n   * @param name String representation of drug name\r\n   */\n  DrugService.prototype.get = function (name) {\n    this.logger.debug(\"DrugService.get: Attempt to retrieve data from cache using generic name (\".concat(name.genericName, \") and brand name (\").concat(name.brandName, \").\"));\n    var key = \"?generic=\".concat(name.genericName, \"&brand=\").concat(name.brandName);\n    if (!this.cache$.has(key)) {\n      this.logger.debug(\"DrugService.get: Unable to find data for \".concat(key, \" in cache, retrieving data from API.\"));\n      this.cache$.set(key, this.requestDrugDetails(name).pipe(shareReplay(this.CACHE_SIZE)));\n    }\n    return this.cache$.get(key);\n  };\n  // Get drug detail for the given name from backend\n  DrugService.prototype.requestDrugDetails = function (name) {\n    return this.http.get(\"\".concat(this.api, \"multi/?generic=\").concat(name.genericName, \"&brand=\").concat(name.brandName));\n  };\n  DrugService.ɵfac = function DrugService_Factory(t) {\n    return new (t || DrugService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('API'), i0.ɵɵinject(i2.NGXLogger));\n  };\n  DrugService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DrugService,\n    factory: DrugService.ɵfac,\n    providedIn: 'root'\n  });\n  return DrugService;\n}();\nexport { DrugService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}